@page "/reportes"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject IStringLocalizer<Resource> localizer
@attribute [Authorize(Policy = "User")]

<h3>@localizer["reportes.titulo"]</h3>

<div>
    <div class="form-group">
        <a class="btn btn-link" href="">@localizer["Back"]</a>
    </div>

    @if (pacientes == null && ensayoClinicos == null)
    {
        <text>Cargando...</text>
    }
    else if (pacientes.Count == 0 && ensayoClinicos.Count == 0)
    {
        <text>No hay registros para mostrar</text>
    }
    else
    {
        @*<div>
                <SfChart ID = "pacienteChart" @ref="pacienteChartObj" Title="Pacientes">
                    <ChartPrimaryXAxis Title="Genero" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Title="Cantidad"></ChartPrimaryYAxis>
                    <ChartSeriesCollection>
                        <ChartSeries DataSource="@datosPacientes" XName="Genero" YName="Cantidad" Type="ChartSeriesType.Column">
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>*@
        <div>
            <SfChart ID="ensayoChart" @ref="ensayoChartObj" Title="Ensayos Clínicos">
                <ChartPrimaryXAxis Title="Año" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Title="Cantidad"></ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@datosEnsayosClinicos" XName="Year" YName="Cantidad" Type="ChartSeriesType.Column">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
    }

</div>

@code {
    private List<Paciente> pacientes;
    private List<EnsayoClinico> ensayoClinicos;
    private List<DatosPacientes> datosPacientes = new List<DatosPacientes>();
    private List<DatosEnsayosClinicos> datosEnsayosClinicos = new List<DatosEnsayosClinicos>();
    SfChart pacienteChartObj = new SfChart();
    SfChart ensayoChartObj = new SfChart();

    internal class DatosPacientes
    {
        internal string Genero { get; set; }
        internal int Cantidad { get; set; }
    }

    internal class DatosEnsayosClinicos
    {
        public string Year { get; set; }
        public int Cantidad { get; set; }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(500);

            // Pacientes
            var httpResponse1 = await repositorio.Get<List<Paciente>>("/api/Paciente");
            pacientes = httpResponse1.Response;

            if (httpResponse1.Error)
            {
                var body = await httpResponse1.HttpResponseMessage.Content.ReadAsStringAsync();
                //Mensaje al usuario
                await js.InvokeVoidAsync("alert", $"ERROR: " + body);
            }

            var query =
                from paciente in pacientes
                group pacientes by paciente.Genero into pacienteGroup
                select new DatosPacientes
                {
                    Genero = pacienteGroup.Key,
                    Cantidad = pacienteGroup.Count(),
                };

            foreach (var item in query)
            {
                datosPacientes.Add(item);
            }

            // Ensayos Clinicos
            var httpResponse2 = await repositorio.Get<List<EnsayoClinico>>("/api/EnsayoClinico");
            ensayoClinicos = httpResponse2.Response;

            if (httpResponse2.Error)
            {
                var body = await httpResponse2.HttpResponseMessage.Content.ReadAsStringAsync();
                //Mensaje al usuario
                await js.InvokeVoidAsync("alert", $"ERROR: " + body);
            }

            //var ensayosGroupedByYear = ensayoClinicos.GroupBy(ensayo => new { ensayo.FechaRegistro.Year, ensayo.Fase},
            //    ensayo => ensayo, (key, g) => new { Year = key.Year, Fase = key.Fase, Cantidad = g.Count()});
            //foreach (var group in ensayosGroupedByYear)
            //{
            //};

            var query2 =
                from ensayo in ensayoClinicos
                group ensayoClinicos by ensayo.FechaRegistro.Year into ensayoGroup
                select new DatosEnsayosClinicos
                {
                    Year = ensayoGroup.Key.ToString(),
                    Cantidad = ensayoGroup.Count(),
                };

            //this.pacienteChartObj.Refresh();
            //this.ensayoChartObj.Refresh();

            foreach (var item in query2)
            {
                datosEnsayosClinicos.Add(item);
            }

        }
        catch (Exception ex)
        {
            //Mensaje al usuario
            await js.InvokeVoidAsync("alert", $"ERROR: " + ex.Message);
        }
    }
}
