@page "/pacientes/oxigeno/{IdPaciente:int}"
@inject IJSRuntime js
@inject IRepositorio repositorio
@inject IStringLocalizer<Resource> localizer
@attribute [Authorize(Policy = "User")]

@{
    var Tool = (new List<string>() { "Search", "ExcelExport" });
}

<h3>@localizer["oxigeno.titulo"] - @localizer["Patient"]: @paciente.Nombre @paciente.Apellido</h3>

<div class="form-group">
    <a class="btn btn-info" href="pacientes/oxigeno/crear/@IdPaciente">@localizer["Add"]</a>
    <a class="btn btn-info" href="pacientes/oxigeno/editar/@regOxigenoSeleccionado.IdOxigeno">@localizer["Edit"]</a>
    <a class="btn btn-outline-primary" href="pacientes/temperatura/@IdPaciente">@localizer["Temperature"]</a>
    <a class="btn btn-outline-primary" href="pacientes/cardio/@IdPaciente">@localizer["Cardio"]</a>
    <a class="btn btn-link" href="pacientes">@localizer["Back"]</a>
</div>

@if (regOxigenos == null)
{
    <text>Cargando...</text>
}
else if (regOxigenos.Count == 0)
{
    <text>No hay registros para mostrar</text>
}
else
{
    <SfGrid ID="Grid" @ref="@DefaultGrid" DataSource="regOxigenos" AllowSelection="true" SelectedRowIndex="0" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true">
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
        <GridEvents OnToolbarClick="ToolbarClickHandler" RowSelected="GetSelectedRecords" TValue="Oxigeno"></GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(Oxigeno.Valor)"
                        HeaderText=@localizer["Value"]
                        TextAlign="TextAlign.Right"
                        Width="90">
            </GridColumn>
            <GridColumn Field="@nameof(Oxigeno.Unidad)"
                        HeaderText=@localizer["Unit"]
                        TextAlign="TextAlign.Left"
                        Width="90">
            </GridColumn>
            <GridColumn Field="@nameof(Oxigeno.Fecha)"
                        HeaderText=@localizer["Date"]
                        TextAlign="TextAlign.Right"
                        Format="dd/MM/yyyy"
                        Type="ColumnType.Date"
                        Width="110">
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <SfChart ID="linechart" @ref="linechartObj">
        <ChartPrimaryXAxis RangePadding="ChartRangePadding.None" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
        </ChartPrimaryXAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@DataSource" XName="XValue" YName="YValue" Type="ChartSeriesType.Line">
                <ChartMarker Visible="true" Height="10" Width="10">
                    <ChartDataLabel Visible="true" />
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
}


@code{
    [Parameter] public int IdPaciente { get; set; }
    private Paciente paciente = new Paciente();
    private List<Oxigeno> regOxigenos;
    private List<Oxigeno> regOxigenosSeleccionados;
    private Oxigeno regOxigenoSeleccionado = new Oxigeno();
    SfGrid<Oxigeno> DefaultGrid;
    public List<double> SelectedRowIndexes { get; set; }
    public double[] TotalValue { get; set; }
    public string SelectedValue;
    SfChart linechartObj = new SfChart();
    public List<ChartData> DataSource = new List<ChartData>();

    public class ChartData
    {
        public DateTime XValue { get; set; }
        public double YValue { get; set; }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(1000);

            var httpResponse = await repositorio.Get<Paciente>($"/api/Paciente/{IdPaciente}");
            // Objeto paciente
            paciente = httpResponse.Response;
            // Lista de registros de oxígeno
            regOxigenos = paciente.Oxigeno;


            foreach (var item in regOxigenos)
            {

                DataSource.Add(new ChartData { XValue = new DateTime(item.Fecha.Year, item.Fecha.Month, item.Fecha.Day), YValue = Convert.ToDouble(item.Valor) });
            }

            this.linechartObj.Refresh();

            if (httpResponse.Error)
            {
                var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
                //Mensaje al usuario
                await js.InvokeVoidAsync("alert", $"ERROR: " + body);
            }

        }
        catch (Exception ex)
        {
            //Mensaje al usuario
            await js.InvokeVoidAsync("alert", $"ERROR: " + ex.Message);
        }
    }

    /// <summary>
    /// Selección de registros en la grilla
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    public async Task GetSelectedRecords(RowSelectEventArgs<Oxigeno> args)
    {
        SelectedRowIndexes = await this.DefaultGrid.GetSelectedRowIndexes();
        regOxigenosSeleccionados = await this.DefaultGrid.GetSelectedRecordsAsync();
        TotalValue = SelectedRowIndexes.ToArray();
        SelectedValue = "";

        foreach (var data in TotalValue)
        {
            SelectedValue = data.ToString();
        }

        foreach (var item in regOxigenosSeleccionados)
        {
            regOxigenoSeleccionado = item;
        }
        StateHasChanged();
    }

    /// <summary>
    /// Exportación a Excel
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            ExportProperties.ExportType = Syncfusion.Blazor.Grids.ExportType.AllPages;
            await this.DefaultGrid.ExcelExport(ExportProperties);
        }
    }
}